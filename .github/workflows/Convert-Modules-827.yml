name: Convert Modules 827

on:
  schedule:
    - cron: '0 0 * * *' # 每天执行一次
  workflow_dispatch: # 手动触发

jobs:
  update-snippet:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download snippets based on Modules-Links.txt
      run: |
        mkdir -p Original
        while IFS= read -r url; do
          filename=$(basename "$url")
          # Extract author from the URL by finding the position of the domain name and slicing
          domain=$(echo "$url" | awk -F[/:] '{print $4}')
          author=$(echo "$url" | awk -v domain="$domain" -F"${domain}/" '{print $2}' | awk -F'/' '{print $1}')
          # Create the directory structure based on the author
          mkdir -p "Original/$author"
          # Download the file
          curl -L -o "Original/$author/$filename" "$url"
        done < Modules-Links.txt

    - name: Prepare Replacement Variables
      id: prepare-replacement
      run: |
        for file in Original/*/*; do
          # 提取文件名和作者
          filename=$(basename "$file")
          author=$(basename "$(dirname "$file")")
          # 提取非注释行中的 hostname 信息
          hostnames=$(grep -v '^#' "$file" | grep 'hostname = ' | awk -F'hostname = ' '{print $2}' | tr '\n' ', ' | sed 's/, $//')
          # 生成注释内容
          comment="# ${filename} // ${hostnames}"
          # 生成环境变量名，替换空格为下划线并确保它是合法的
          varname="${author}_${filename// /_}_COMMENT"  
          # 输出到环境变量
          echo "$varname=$comment" >> $GITHUB_ENV
        done

    - name: Convert snippets
      run: |
        for file in Original/*/*; do
          # Extract author, filename, and module name
          author=$(basename "$(dirname "$file")")
          filename=$(basename "$file")
          module_name="${filename%.*}"
          
          # Sanitize module name by replacing invalid characters with underscores
          sanitized_module_name=$(echo "$module_name" | sed 's/[^a-zA-Z0-9_]/_/g')

          # Add your comment or custom logic here
          comment="Converted from $filename by $author"
          comment_var="${sanitized_module_name}_COMMENT"
          
          # Run the conversion script
          bash Convert-Modules.sh "$file" "$sanitized_module

    - name: Create README in Modules directory
      run: |
        echo "# Modules for Surge and Loon" > Modules/README.md
        echo "" >> Modules/README.md
        echo "This directory contains converted modules from various sources, compatible with Surge and Loon." >> Modules/README.md
        echo "" >> Modules/README.md
        echo "## Sources" >> Modules/README.md
        echo "" >> Modules/README.md
        for file in Modules/Surge/*; do
          basefile=$(basename "$file")
          echo "- **${basefile%%.*}**: Converted from [${basefile%%.*}](https://github.com/$(basename "$(dirname "$file")")/$(basename "$file"))" >> Modules/README.md
        done

    - name: Commit and Push changes
      run: |
        git config --local user.name "ifflagged"
        git config --local user.email "qibo.sign@outlook.com"
        git add .
        if git diff --cached --quiet; then
          echo "No changes detected"
        else
          git commit -m "Update Modules"
          git push
        fi

    - name: Send TG Notification
      run: |
        # Check if there is a previous commit
        if git rev-parse --verify HEAD^1 >/dev/null 2>&1; then
          UPDATED_FILES=$(git diff --name-only HEAD^1 HEAD Modules/)
        else
          UPDATED_FILES=$(git diff --name-only HEAD Modules/)
        fi
        
        if [ -n "$UPDATED_FILES" ]; then
          MESSAGE="The following files have been updated:\n$UPDATED_FILES"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage -d chat_id=${{ secrets.TG_ID }} -d text="$MESSAGE"
        else
          echo "No files were updated, no notification sent."
        fi
