name: Convert Modules

on:
  schedule:
    - cron: '0 0 * * *' # 每天执行一次
  workflow_dispatch: # 手动触发

jobs:
  update-snippet:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download snippets from Modules-Links.txt
      run: |
        mkdir -p Original
        while read -r url; do
          # 提取作者名称和文件名
          author=$(echo "$url" | awk -F'/' '{print $4}')
          filename=$(basename "$url")
          # 创建作者文件夹
          mkdir -p "Original/$author"
          # 下载文件
          curl -L -o "Original/$author/$filename" "$url"
        done < Modules-Links.txt

    - name: Prepare Replacement Variables
      id: prepare-replacement
      run: |
        for file in $(find Original -type f); do
          # 提取文件路径中的作者和文件名
          author=$(basename "$(dirname "$file")")
          filename=$(basename "$file" | cut -d'.' -f1)
          # 提取非注释行中的 hostname 信息
          hostnames=$(grep -v '^#' "$file" | grep 'hostname = ' | awk -F'hostname = ' '{print $2}' | tr '\n' ', ' | sed 's/, $//')
          # 生成注释内容
          comment="# ${filename} // ${hostnames}"
          # 生成环境变量名，替换空格为下划线并确保它是合法的
          varname="${author}_${filename}_COMMENT"  
          # 输出到环境变量
          echo "$varname=$comment" >> $GITHUB_ENV
        done

    - name: Convert snippets
      run: |
        mkdir -p Modules/Surge Modules/Loon
        for file in $(find Original -type f); do
          author=$(basename "$(dirname "$file")")
          filename=$(basename "$file" | cut -d'.' -f1)
          varname="${author}_${filename}_COMMENT"
          comment=${!varname}
          bash Convert-Modules.sh "$file" "${author}_${filename}" "$comment"
        done


    - name: Commit and Push changes
      run: |
        git config --local user.name "ifflagged"
        git config --local user.email "qibo.sign@outlook.com"
        git add .
        if git diff --cached --quiet; then
          echo "No changes detected"
        else
          git commit -m "Update Modules"
          git push
        fi

    - name: Send TG Notification
      run: |
        # Check if there is a previous commit
        if git rev-parse --verify HEAD^1 >/dev/null 2>&1; then
          UPDATED_FILES=$(git diff --name-only HEAD^1 HEAD Modules/)
        else
          UPDATED_FILES=$(git diff --name-only HEAD Modules/)
        fi
        
        if [ -n "$UPDATED_FILES" ]; then
          MESSAGE="The following files have been updated:\n$UPDATED_FILES"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage -d chat_id=${{ secrets.TG_ID }} -d text="$MESSAGE"
        else
          echo "No files were updated, no notification sent."
        fi
