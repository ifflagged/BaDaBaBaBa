name: Process Links

on:
  workflow_dispatch:  # 允许手动触发工作流
name: Process Links


jobs:
  process_links:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Read links and generate new links
        id: generate_links
        run: |
          file="Links/Modules-Links.txt"
          output="Links/Processed-Links.txt"
          echo "" > $output

          while IFS= read -r line; do
            filename=$(basename "$line")
            extension="${filename##*.}"
            
            # 根据文件后缀设置type
            if [[ "$extension" == "sgmodule" ]]; then
              type="surge-module"
            elif [[ "$extension" == "plugin" ]]; then
              type="loon-plugin"
            else
              type="qx-rewrite"
            fi

            # 生成新链接
            new_link="http://script.hub/file/_start_/$line/_end_/$filename?type=$type&target=$type"
            echo "$new_link" >> $output
          done < "$file"

      - name: Fetch Rewrite-Parser.js
        run: |
          curl -O https://raw.githubusercontent.com/Script-Hub-Org/Script-Hub/main/Rewrite-Parser.js

      - name: Run Rewrite-Parser.js
        run: |
          # 使用生成的链接作为$request参数
          links=$(cat Links/Processed-Links.txt)
          for link in $links; do
            # 这里调用 Node.js 执行 Rewrite-Parser.js
            # 注意，$request.url 需要模拟
            node -e "
              const url = '$link';
              const req = url.split(/file\/_start_\//)[1].split(/\/_end_\//)[0];
              const reqArr = req.match('%F0%9F%98%82') ? req.split('%F0%9F%98%82') : [req];
              const urlArg = url.split(/\/_end_\//)[1];
              console.log('Processed URL:', url);
              console.log('Request Array:', reqArr);
              console.log('URL Argument:', urlArg);
            "
          done
