name: Convert Lists

on:
  schedule:
    - cron: '0 0 * * *' # Run daily
  workflow_dispatch: # Manual trigger

jobs:
  update-lists:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download and categorize lists based on author
      run: |
        mkdir -p Original
        for file in Links/Rulesets/Rulesets-*.txt; do
          while IFS= read -r url; do
            author=$(echo "$url" | awk -F'/' '{print $4}')
            mkdir -p "Original/$author"
            filename=$(basename "$url")
            curl -L -o "Original/$author/$filename" "$url"
          done < "$file"
        done

    - name: Merge all downloaded lists and generate files
      run: |
        for file in Links/Rulesets/Rulesets-*.txt; do
          base_name=$(echo "$file" | sed 's/^Links\/Rulesets\/Rulesets-//;s/\.txt$//')
          touch "Original/MergedList_$base_name.list"
          first_link=true

          while IFS= read -r url; do
            author=$(echo "$url" | awk -F'/' '{print $4}')
            filename=$(basename "$url")

            if [ "$first_link" = true ]; then
              first_link=false
            else
              echo -e "\n\n" >> "Original/MergedList_$base_name.list"
            fi
            
            if [ -f "Original/$author/$filename" ]; then
              echo "# Merging from $author/$filename" >> "Original/MergedList_$base_name.list"
              cat "Original/$author/$filename" >> "Original/MergedList_$base_name.list"
            else
              echo "Warning: File not found: Original/$author/$filename"
            fi
          done < "$file"

          # Generate Rules for Surge
          mkdir -p "Rulesets/Surge"
          sed -e 's/HOST/DOMAIN/Ig' \
              -e 's/HOSt-SUFFIX/DOMAIN-SUFFIX/Ig' \
              -e 's/HOST-KEYWORD/DOMAIN-KEYWORD/Ig' \
              -e 's/IP-CIDR/IP-CIDR/Ig' \
              -e 's/IP6-CIDR/IP-CIDR6/Ig' \
              -e 's/REJECT/REJECT/Ig' \
              -e 's/\([^[:space:]]\)\/\/\(.*\)/\1#\2/g' \
              -e '/;/d' \
              "Original/MergedList_$base_name.list" > "Rulesets/Surge/$base_name.list"

          # Generate Rules for Clash
          mkdir -p "Rulesets/Clash"
          echo "payload:" > "Rulesets/Clash/$base_name.yaml"
          sed -e 's/^DOMAIN/  - DOMAIN/Ig' \
              -e 's/^DOMAIN-SUFFIX/  - DOMAIN-SUFFIX/Ig' \
              -e 's/^DOMAIN-KEYWORD/  - DOMAIN-KEYWORD/Ig' \
              -e 's/^IP-CIDR/  - IP-CIDR/Ig' \
              -e 's/^IP-CIDR6/  - IP-CIDR6/Ig' \
              -e 's/\([^[:space:]]\)\/\/\(.*\)/\1#\2/g' \
              -e '/;/d' \
              "Rulesets/Surge/$base_name.list" >> "Rulesets/Clash/$base_name.yaml"
        done

    - name: Clean up temporary files
      run: |
        rm -rf Original/MergedList_*.list

    - name: Create or update README with source links
      run: |
        echo "# Rulesets for Surge and Clash" > Rulesets/README.md
        echo "" >> Rulesets/README.md
        echo "This directory contains rulesets converted from various sources, compatible with Surge and Clash." >> Rulesets/README.md
        echo "" >> Rulesets/README.md
        echo "## Sources" >> Rulesets/README.md
        echo "" >> Rulesets/README.md
        for file in Rulesets-*.txt; do
          while IFS= read -r url; do
            echo "- $(basename "$url"): [$url]" >> Rulesets/README.md
          done < "$file"
        done

    - name: Check for changes
      id: changes
      run: |
        git add .
        if git diff-index --quiet HEAD --; then
          echo "::set-output name=result::No changes"
        else
          echo "::set-output name=result::Changes detected"
        fi

    - name: Commit changes if any
      if: steps.changes.outputs.result == 'Changes detected'
      run: |
        git config --local user.name "ifflagged"
        git config --local user.email "qibo.sign@outlook.com"
        git commit -m "Update Rulesets"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/ifflagged/BaDaBaBaBa.git

    - name: Send Telegram notification if changes were committed
      if: steps.changes.outputs.result == 'Changes detected'
      run: |
        if git rev-parse --verify HEAD^1 >/dev/null 2>&1; then
          UPDATED_FILES=$(git diff --name-only HEAD^1 HEAD Rulesets/)
        else
          UPDATED_FILES=$(git diff --name-only HEAD Rulesets/)
        fi

        if [ -n "$UPDATED_FILES" ]; then
          MESSAGE="The following files have been updated:\n"
          GITHUB_URL="https://github.com/ifflagged/BaDaBaBaBa/blob/main/"
          while read -r file; do
            file_url="${GITHUB_URL}${file}"
            MESSAGE="${MESSAGE}[${file}](${file_url})\n"
          done <<< "$UPDATED_FILES"

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TG_ID }} \
            -d text="$(echo -e "$MESSAGE")" \
            -d parse_mode=Markdown
        else
          echo "No files were updated, no notification sent."
        fi
