name: Convert Modules

on:
  schedule:
    - cron: '0 0 * * *' # 每天执行一次
  workflow_dispatch: # 手动触发

jobs:
  update-snippet:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download snippets and prepare variables
      id: download-and-prepare
      run: |
        mkdir -p Original
        README_CONTENT=""
        FILES_LIST=""
        while read -r url; do
          # 提取作者名称和文件名
          author=$(echo "$url" | awk -F'/' '{print $4}')
          filename=$(basename "$url")
          filename_no_ext=$(basename "$url" | cut -d'.' -f1)
          # 创建作者文件夹
          mkdir -p "Original/$author"
          # 下载文件
          file_path="Original/$author/$filename"
          if curl -L -o "$file_path" "$url"; then
            echo "Downloaded $filename successfully."
          else
            echo "Failed to download $filename from $url."
            continue # 跳过下载失败的文件
          fi
          
          # 准备README内容
          README_CONTENT="${README_CONTENT}\n- **${filename_no_ext}**: Converted from [${author} ${filename_no_ext}](${url})"
          
          # 提取非注释行中的 hostname 信息
          hostnames=$(grep -v '^#' "$file_path" | grep 'hostname = ' | awk -F'hostname = ' '{print $2}' | tr '\n' ', ' | sed 's/, $//')
          # 生成注释内容
          comment="# ${filename_no_ext} // ${hostnames}"
          
          # 将文件信息追加到 FILES_LIST
          FILES_LIST="${FILES_LIST}\n${file_path};${author};${filename_no_ext};${comment}"
        done < Links/Modules-Links.txt
        
        # 将 README 内容和文件列表输出到步骤的输出中
        echo "README_CONTENT<<EOF" >> $GITHUB_ENV
        echo -e "$README_CONTENT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "FILES_LIST<<EOF" >> $GITHUB_ENV
        echo -e "$FILES_LIST" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Convert snippets
      run: |
        declare -A file_tracker  # 创建文件追踪器

        IFS=$'\n'
        for file_info in $FILES_LIST; do
          # 跳过空行
          [ -z "$file_info" ] && continue
          file_path=$(echo $file_info | cut -d';' -f1)
          author=$(echo $file_info | cut -d';' -f2)
          filename=$(echo $file_info | cut -d';' -f3)
          comment=$(echo $file_info | cut -d';' -f4)

          base_name="${author}_${filename}"
          
          # 如果文件名已经出现过，则对该文件进行重命名
          if [[ -n "${file_tracker[$base_name]}" ]]; then
            i=${file_tracker[$base_name]}
            new_name="${base_name}-${i}"
            ((i++))
            file_tracker[$base_name]=$i
          else
            new_name="${base_name}"
            file_tracker[$base_name]=2  # 设置下次重命名起点
          fi

          # 检查转换脚本是否存在，若不存在则跳过
          if [ ! -f Scripts/Convert-Modules.sh ]; then
            echo "Convert-Modules.sh script not found."
            exit 1
          fi
          
          # 调用转换脚本
          bash Scripts/Convert-Modules.sh "$file_path" "$new_name" "$comment"
          if [ $? -ne 0 ]; then
            echo "Conversion failed for $file_path"
          else
            echo "Conversion successful for $file_path"
          fi
        done
        
    - name: Create README in Modules directory
      run: |
        echo "# Modules for Surge and Loon" > Modules/README.md
        echo "" >> Modules/README.md
        echo "This directory contains converted modules from various sources, compatible with Surge and Loon." >> Modules/README.md
        echo "" >> Modules/README.md
        echo "## Sources" >> Modules/README.md
        echo "" >> Modules/README.md
        echo -e "$README_CONTENT" >> Modules/README.md

    - name: Commit and Push changes
      run: |
        git config --local user.name "ifflagged"
        git config --local user.email "qibo.sign@outlook.com"
        git pull origin main --rebase
        git add .
        if git diff --cached --quiet; then
          echo "No changes detected"
        else
          git commit -m "Update Modules"
          git push
        fi

    - name: Send TG Notification
      run: |
        # 检查是否存在上一个提交
        if git rev-parse --verify HEAD^1 >/dev/null 2>&1; then
          UPDATED_FILES=$(git diff --name-only HEAD^1 HEAD Modules/)
        else
          UPDATED_FILES=$(git diff --name-only HEAD Modules/)
        fi

        if [ -n "$UPDATED_FILES" ]; then
          MESSAGE="The following files have been updated:\n"
          GITHUB_URL="https://github.com/ifflagged/BaDaBaBaBa/blob/main/"
          while read -r file; do
            # 去掉 'Modules/' 前缀
            display_name=$(echo "$file" | sed 's/Modules\///')
            # 生成完整链接
            file_url="${GITHUB_URL}${file}"
            # 生成 markdown 格式的超链接
            MESSAGE="${MESSAGE}[${display_name}](${file_url})\n"
          done <<< "$UPDATED_FILES"

          # 使用 echo -e 处理换行符并发送通知
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TG_ID }} \
            -d text="$(echo -e "$MESSAGE")" \
            -d parse_mode=Markdown
        else
          echo "No files were updated, no notification sent."
        fi
